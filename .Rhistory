buckets = BUCKETS,
plot = T,
return_full = F)
print(sprintf("Synthetic sampling difference: %.6f", imp_samp_error))
### Saving to feather ####
filename <- sprintf("%s/data/feather_samples/%s_%s_synthetic_sample.feather", wd, current_iter, method)
write_feather(synthetic_sampling, filename)
}
}
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(wd)
library(arrow)
library(dplyr)
library(stringr)
devtools::load_all("functions/SamplingCorrection")
amelia_full_income <- read_feather(sprintf("%s/data/AMELIA.feather", wd))$Person_Income
##### Get reference values (i.e. 'true' population values) #####
# Set bucket size for comparison between values
# Source: https://unstats.un.org/unsd/demographic/sources/census/quest/NZL2013enIn.pdf
BUCKETS <- c(seq(0, 40000, by = 5000), seq(50000, 70000, by = 10000), 100000, 150000, max(amelia_full_income)+1)
#### Computing true buckets #####
AMELIA_BUCKET_INCOME <- get_bucket_dist(amelia_full_income, buckets = BUCKETS)
#### Simulation ####
FILENAMES <- str_pad(1:10, width = 2, pad = "0")
FILENAMES <- paste0(FILENAMES, "_sample.rds", sep = "")
SAMPLING_METHODS <- c("SRS", "Stratified", "Stratified Cluster")
seed <- 1
for (file in FILENAMES){
print(sprintf("---------- %s ----------", file))
set.seed(seed)
current_sample <- readRDS(sprintf("data/samples/%s", file))
current_iter <- str_pad(seed, width = 2, pad = "0")
for (method in SAMPLING_METHODS){
print(sprintf("### %s ####", method))
resample_data <- current_sample[[method]]
resample_data$Sex <- as.factor(resample_data$Sex)
resample_data <- relocate(resample_data, Person_Income) # Put DV as first column for ML
# Base error
income_difference <- compute_income_diff(resample_data$Person_Income,
amelia_income_dist = AMELIA_BUCKET_INCOME,
buckets = BUCKETS,
plot_relevance = T)
print(sprintf("Base Sample difference: %.6f", income_difference$squared_deviation))
### Saving to feather ####
filename <- sprintf("%s/data/feather_samples/%s_%s_base_sample.feather", wd, current_iter, method)
write_feather(resample_data, filename)
# Importance Sampling
importance_sampling <- importance_sample(income_difference,
data = resample_data,
amelia_buckets = AMELIA_BUCKET_INCOME,
buckets = BUCKETS,
print_cases = F)
imp_samp_error <- compute_income_diff(importance_sampling$Person_Income,
amelia_income_dist = AMELIA_BUCKET_INCOME,
buckets = BUCKETS,
return_full = F)
print(sprintf("Importance sampling difference: %.6f", imp_samp_error))
### Saving to feather ####
filename <- sprintf("%s/data/feather_samples/%s_%s_importance_sample.feather", wd, current_iter, method)
write_feather(importance_sampling, filename)
# Synthetic oversampling
synthetic_sampling <- synth_sample(income_difference,
data = resample_data,
amelia_buckets = AMELIA_BUCKET_INCOME,
buckets = BUCKETS,
print_cases = F)
synth_samp_error <- compute_income_diff(synthetic_sampling$Person_Income,
amelia_income_dist = AMELIA_BUCKET_INCOME,
buckets = BUCKETS,
return_full = F)
print(sprintf("Synthetic sampling difference: %.6f", imp_samp_error))
### Saving to feather ####
filename <- sprintf("%s/data/feather_samples/%s_%s_synthetic_sample.feather", wd, current_iter, method)
write_feather(synthetic_sampling, filename)
}
seed <- seed+1
}
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(wd)
library(arrow)
library(dplyr)
library(stringr)
devtools::load_all("functions/SamplingCorrection")
amelia_full_income <- read_feather(sprintf("%s/data/AMELIA.feather", wd))$Person_Income
##### Get reference values (i.e. 'true' population values) #####
# Set bucket size for comparison between values
# Source: https://unstats.un.org/unsd/demographic/sources/census/quest/NZL2013enIn.pdf
BUCKETS <- c(seq(0, 40000, by = 5000), seq(50000, 70000, by = 10000), 100000, 150000, max(amelia_full_income)+1)
#### Computing true buckets #####
AMELIA_BUCKET_INCOME <- get_bucket_dist(amelia_full_income, buckets = BUCKETS)
#### Simulation ####
FILENAMES <- str_pad(1:10, width = 2, pad = "0")
FILENAMES <- paste0(FILENAMES, "_sample.rds", sep = "")
SAMPLING_METHODS <- c("SRS", "Stratified", "Stratified Cluster")
seed <- 1
for (file in FILENAMES){
print(sprintf("---------- %s ----------", file))
set.seed(seed)
current_sample <- readRDS(sprintf("data/samples/%s", file))
current_iter <- str_pad(seed, width = 2, pad = "0")
for (method in SAMPLING_METHODS){
print(sprintf("### %s ####", method))
resample_data <- current_sample[[method]]
resample_data$Sex <- as.factor(resample_data$Sex)
resample_data <- relocate(resample_data, Person_Income) # Put DV as first column for ML
# Base error
income_difference <- compute_income_diff(resample_data$Person_Income,
amelia_income_dist = AMELIA_BUCKET_INCOME,
buckets = BUCKETS,
plot_relevance = T)
print(sprintf("Base Sample difference: %.6f", income_difference$squared_deviation))
### Saving to feather ####
filename <- sprintf("%s/data/feather_samples/%s_%s_base_sample.feather", wd, current_iter, method)
write_feather(resample_data, filename)
# Importance Sampling
importance_sampling <- importance_sample(income_difference,
data = resample_data,
amelia_buckets = AMELIA_BUCKET_INCOME,
buckets = BUCKETS,
print_cases = F)
imp_samp_error <- compute_income_diff(importance_sampling$Person_Income,
amelia_income_dist = AMELIA_BUCKET_INCOME,
buckets = BUCKETS,
return_full = F)
print(sprintf("Importance sampling difference: %.6f", imp_samp_error))
### Saving to feather ####
filename <- sprintf("%s/data/feather_samples/%s_%s_importance_sample.feather", wd, current_iter, method)
write_feather(importance_sampling, filename)
# Synthetic oversampling
synthetic_sampling <- synth_sample(income_difference,
data = resample_data,
amelia_buckets = AMELIA_BUCKET_INCOME,
buckets = BUCKETS,
print_cases = F)
synth_samp_error <- compute_income_diff(synthetic_sampling$Person_Income,
amelia_income_dist = AMELIA_BUCKET_INCOME,
buckets = BUCKETS,
return_full = F)
print(sprintf("Synthetic sampling difference: %.6f", imp_samp_error))
### Saving to feather ####
filename <- sprintf("%s/data/feather_samples/%s_%s_synthetic_sample.feather", wd, current_iter, method)
write_feather(synthetic_sampling, filename)
}
seed <- seed+1
}
rm(list = ls())
require(arrow)
require(dplyr)
library(caret)
library(stringr)
options(warn=-1)
"Create Dummy Variables"
cata_encode <- function(dataframe){
tmp <- dataframe %>%
sjmisc::to_dummy(Work_Status) %>%
dplyr::select(1:3)
colnames(tmp) <- c("At Work","Unemployed","Retired")
dataframe <- dataframe %>%
dplyr::select(-c("Work_Status")) %>%
cbind(tmp)
tmp <- dataframe %>%
sjmisc::to_dummy(Highest_ISCED) %>%
dplyr::select(1:4)
colnames(tmp) <- c("ISCED 1","ISCED 2","ISCED 3","ISCED 4")
dataframe <- dataframe %>%
dplyr::select(-c("Highest_ISCED")) %>%
cbind(tmp)
tmp <- dataframe %>%
sjmisc::to_dummy(Martial_Status) %>%
dplyr::select(1:4)
colnames(tmp) <- c("Never Married", "Married", "Separated", "Widowed")
dataframe <- dataframe %>%
dplyr::select(-c("Martial_Status")) %>%
cbind(tmp)
tmp <- dataframe %>%
sjmisc::to_dummy(Regional_ID) %>%
dplyr::select(1:3)
colnames(tmp) <- c("Region_1", "Region_2", "Region_3")
dataframe <- dataframe %>%
dplyr::select(-c("Regional_ID")) %>%
cbind(tmp)
}
"Change WD (Assigned to reset for holdout_dir assignment"
wd <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
feather_dir <- paste(wd, "/data/feather_samples", sep = "")
results_dir <- paste(wd, "/results", sep = "")
fnames <- list.files(path = feather_dir, pattern = "\\.feather")
holdout <- read_feather(sprintf("%s/data/Holdout.feather", wd))%>% dplyr::select(-c('index', 'Personal_ID', 'City/Community'))
holdout$Sex <- factor(holdout$Sex)
holdout <- cata_encode(holdout)
scores <- read.csv(sprintf("%s/scores.csv", results_dir), sep = ";")
scores_holdout <- read.csv(sprintf("%s/scores_holdout.csv", results_dir), sep = ";")
for (f in fnames){
data <- read_feather(sprintf("%s/%s", feather_dir, f)) %>%
dplyr::select(-c('index', 'Personal_ID', 'City.Community')) %>%
relocate(Person_Income)
data$Sex <- factor(data$Sex)
data <- cata_encode(data) # Dummy encoding
# Train-test Split
train <- data[1:round(0.75 * nrow(data)),]
test <- data[(round(0.75 * nrow(data)) + 1):nrow(data), ]
# Train model
model <- train(Person_Income ~ ., data = train, method = "lm")
test$predict_vals <- predict(model, test)
test$predict_vals <- ifelse(test$predict_vals < 0, 0, test$predict_vals)
test_r2 <- as.numeric(postResample(test$predict_vals, test$Person_Income)[2])
holdout$predict_vals <- predict(model, newdata = holdout)
holdout$predict_vals <- ifelse(holdout$predict_vals < 0, 0, holdout$predict_vals)
holdout_r2 <- as.numeric(postResample(holdout$predict_vals, holdout$Person_Income)[2])
split_name <- str_split(f, pattern = "_")[[1]]
if (split_name[1] == "01"){
varname <- sprintf("LR_%s_%s", split_name[2], split_name[3])
scores[varname] <- 0
scores_holdout[varname] <- 0
}
scores[as.numeric(split_name[1]), varname] <- test_r2
scores_holdout[as.numeric(split_name[1]), varname] <- holdout_r2
relocate(holdout, predict_vals, .after = Person_Income)
relocate(test, predict_vals, .after = Person_Income)
}
scores
rm(list = ls())
require(arrow)
require(dplyr)
library(sjmisc)
library(caret)
library(stringr)
options(warn=-1)
"Create Dummy Variables"
cata_encode <- function(dataframe){
tmp <- dataframe %>%
sjmisc::to_dummy(Work_Status) %>%
dplyr::select(1:3)
colnames(tmp) <- c("At Work","Unemployed","Retired")
dataframe <- dataframe %>%
dplyr::select(-c("Work_Status")) %>%
cbind(tmp)
tmp <- dataframe %>%
sjmisc::to_dummy(Highest_ISCED) %>%
dplyr::select(1:4)
colnames(tmp) <- c("ISCED 1","ISCED 2","ISCED 3","ISCED 4")
dataframe <- dataframe %>%
dplyr::select(-c("Highest_ISCED")) %>%
cbind(tmp)
tmp <- dataframe %>%
sjmisc::to_dummy(Martial_Status) %>%
dplyr::select(1:4)
colnames(tmp) <- c("Never Married", "Married", "Separated", "Widowed")
dataframe <- dataframe %>%
dplyr::select(-c("Martial_Status")) %>%
cbind(tmp)
tmp <- dataframe %>%
sjmisc::to_dummy(Regional_ID) %>%
dplyr::select(1:3)
colnames(tmp) <- c("Region_1", "Region_2", "Region_3")
dataframe <- dataframe %>%
dplyr::select(-c("Regional_ID")) %>%
cbind(tmp)
}
"Change WD (Assigned to reset for holdout_dir assignment"
wd <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
feather_dir <- paste(wd, "/data/feather_samples", sep = "")
results_dir <- paste(wd, "/results", sep = "")
fnames <- list.files(path = feather_dir, pattern = "\\.feather")
holdout <- read_feather(sprintf("%s/data/Holdout.feather", wd))%>% dplyr::select(-c('index', 'Personal_ID', 'City/Community'))
holdout$Sex <- factor(holdout$Sex)
holdout <- cata_encode(holdout)
scores <- read.csv(sprintf("%s/scores.csv", results_dir), sep = ";")
scores_holdout <- read.csv(sprintf("%s/scores_holdout.csv", results_dir), sep = ";")
for (f in fnames){
data <- read_feather(sprintf("%s/%s", feather_dir, f)) %>%
dplyr::select(-c('index', 'Personal_ID', 'City.Community')) %>%
relocate(Person_Income)
data$Sex <- factor(data$Sex)
data <- cata_encode(data) # Dummy encoding
# Train-test Split
train <- data[1:round(0.75 * nrow(data)),]
test <- data[(round(0.75 * nrow(data)) + 1):nrow(data), ]
# Train model
model <- train(Person_Income ~ ., data = train, method = "lm")
test$predict_vals <- predict(model, test)
test$predict_vals <- ifelse(test$predict_vals < 0, 0, test$predict_vals)
test_r2 <- as.numeric(postResample(test$predict_vals, test$Person_Income)[2])
holdout$predict_vals <- predict(model, newdata = holdout)
holdout$predict_vals <- ifelse(holdout$predict_vals < 0, 0, holdout$predict_vals)
holdout_r2 <- as.numeric(postResample(holdout$predict_vals, holdout$Person_Income)[2])
split_name <- str_split(f, pattern = "_")[[1]]
if (split_name[1] == "01"){
varname <- sprintf("LR_%s_%s", split_name[2], split_name[3])
scores[varname] <- 0
scores_holdout[varname] <- 0
}
print(sprintf("%s: %.4f (test), %.4f (holdout)", f, test_r2, holdout_r2))
print(varname)
scores[as.numeric(split_name[1]), varname] <- test_r2
scores_holdout[as.numeric(split_name[1]), varname] <- holdout_r2
relocate(holdout, predict_vals, .after = Person_Income)
relocate(test, predict_vals, .after = Person_Income)
}
split_name[1]
as.numeric(split_name[1])
scores[as.numeric(split_name[1]),]
scores[as.numeric(split_name[1]),varname]
scores[varname]
rm(list = ls())
require(arrow)
require(dplyr)
library(sjmisc)
library(caret)
library(stringr)
options(warn=-1)
suppressMessages(sjmisc::to_dummy(), "New names")
"Create Dummy Variables"
cata_encode <- function(dataframe){
tmp <- dataframe %>%
sjmisc::to_dummy(Work_Status) %>%
dplyr::select(1:3)
colnames(tmp) <- c("At Work","Unemployed","Retired")
dataframe <- dataframe %>%
dplyr::select(-c("Work_Status")) %>%
cbind(tmp)
tmp <- dataframe %>%
sjmisc::to_dummy(Highest_ISCED) %>%
dplyr::select(1:4)
colnames(tmp) <- c("ISCED 1","ISCED 2","ISCED 3","ISCED 4")
dataframe <- dataframe %>%
dplyr::select(-c("Highest_ISCED")) %>%
cbind(tmp)
tmp <- dataframe %>%
sjmisc::to_dummy(Martial_Status) %>%
dplyr::select(1:4)
colnames(tmp) <- c("Never Married", "Married", "Separated", "Widowed")
dataframe <- dataframe %>%
dplyr::select(-c("Martial_Status")) %>%
cbind(tmp)
tmp <- dataframe %>%
sjmisc::to_dummy(Regional_ID) %>%
dplyr::select(1:3)
colnames(tmp) <- c("Region_1", "Region_2", "Region_3")
dataframe <- dataframe %>%
dplyr::select(-c("Regional_ID")) %>%
cbind(tmp)
}
"Change WD (Assigned to reset for holdout_dir assignment"
wd <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
feather_dir <- paste(wd, "/data/feather_samples", sep = "")
results_dir <- paste(wd, "/results", sep = "")
fnames <- list.files(path = feather_dir, pattern = "\\.feather")
holdout <- read_feather(sprintf("%s/data/Holdout.feather", wd))%>% dplyr::select(-c('index', 'Personal_ID', 'City/Community'))
holdout$Sex <- factor(holdout$Sex)
holdout <- cata_encode(holdout)
scores <- read.csv(sprintf("%s/scores.csv", results_dir), sep = ";")
scores_holdout <- read.csv(sprintf("%s/scores_holdout.csv", results_dir), sep = ";")
for (f in fnames){
data <- read_feather(sprintf("%s/%s", feather_dir, f)) %>%
dplyr::select(-c('index', 'Personal_ID', 'City.Community')) %>%
relocate(Person_Income)
data$Sex <- factor(data$Sex)
data <- cata_encode(data) # Dummy encoding
# Train-test Split
train <- data[1:round(0.75 * nrow(data)),]
test <- data[(round(0.75 * nrow(data)) + 1):nrow(data), ]
# Train model
model <- train(Person_Income ~ ., data = train, method = "lm")
test$predict_vals <- predict(model, test)
test$predict_vals <- ifelse(test$predict_vals < 0, 0, test$predict_vals)
test_r2 <- as.numeric(postResample(test$predict_vals, test$Person_Income)[2])
holdout$predict_vals <- predict(model, newdata = holdout)
holdout$predict_vals <- ifelse(holdout$predict_vals < 0, 0, holdout$predict_vals)
holdout_r2 <- as.numeric(postResample(holdout$predict_vals, holdout$Person_Income)[2])
split_name <- str_split(f, pattern = "_")[[1]]
if (split_name[1] == "01"){
scores[varname] <- 0
scores_holdout[varname] <- 0
}
varname <- sprintf("LR_%s_%s", split_name[2], split_name[3])
print(sprintf("%s: %.4f (test), %.4f (holdout)", f, test_r2, holdout_r2))
print(varname)
scores[as.numeric(split_name[1]), varname] <- test_r2
scores_holdout[as.numeric(split_name[1]), varname] <- holdout_r2
relocate(holdout, predict_vals, .after = Person_Income)
relocate(test, predict_vals, .after = Person_Income)
}
suppressMessages(sjmisc::to_dummy(), "New names")
"Create Dummy Variables"
install.packages("pckgcond")
install.packages("pkgcond")
pkgcond::suppress_messages(sjmisc::to_dummy(), "New names")
rm(list = ls())
require(arrow)
require(dplyr)
library(sjmisc)
library(caret)
library(stringr)
pkgcond::suppress_messages(sjmisc::to_dummy(), "New names")
"Create Dummy Variables"
pkgcond::suppress_messages(sjmisc::to_dummy(), pattern = "New names")
pkgcond::suppress_messages(sjmisc::to_dummy(), pattern = "New")
pkgcond::suppress_messages(to_dummy(), pattern = "New")
rm(list = ls())
require(arrow)
require(dplyr)
library(sjmisc)
library(caret)
library(stringr)
options(warn = -1)
"Create Dummy Variables"
cata_encode <- function(dataframe){
tmp <- dataframe %>%
sjmisc::to_dummy(Work_Status) %>%
dplyr::select(1:3)
colnames(tmp) <- c("At Work","Unemployed","Retired")
dataframe <- dataframe %>%
dplyr::select(-c("Work_Status")) %>%
cbind(tmp)
tmp <- dataframe %>%
sjmisc::to_dummy(Highest_ISCED) %>%
dplyr::select(1:4)
colnames(tmp) <- c("ISCED 1","ISCED 2","ISCED 3","ISCED 4")
dataframe <- dataframe %>%
dplyr::select(-c("Highest_ISCED")) %>%
cbind(tmp)
tmp <- dataframe %>%
sjmisc::to_dummy(Martial_Status) %>%
dplyr::select(1:4)
colnames(tmp) <- c("Never Married", "Married", "Separated", "Widowed")
dataframe <- dataframe %>%
dplyr::select(-c("Martial_Status")) %>%
cbind(tmp)
tmp <- dataframe %>%
sjmisc::to_dummy(Regional_ID) %>%
dplyr::select(1:3)
colnames(tmp) <- c("Region_1", "Region_2", "Region_3")
dataframe <- dataframe %>%
dplyr::select(-c("Regional_ID")) %>%
cbind(tmp)
}
"Change WD (Assigned to reset for holdout_dir assignment"
wd <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(wd)
feather_dir <- paste(wd, "/data/feather_samples", sep = "")
results_dir <- paste(wd, "/results", sep = "")
fnames <- list.files(path = feather_dir, pattern = "\\.feather")
holdout <- read_feather(sprintf("%s/data/Holdout.feather", wd))%>% dplyr::select(-c('index', 'Personal_ID', 'City/Community'))
holdout$Sex <- factor(holdout$Sex)
holdout <- cata_encode(holdout)
scores <- read.csv(sprintf("%s/scores.csv", results_dir), sep = ";")
scores_holdout <- read.csv(sprintf("%s/scores_holdout.csv", results_dir), sep = ";")
for (f in fnames){
data <- read_feather(sprintf("%s/%s", feather_dir, f)) %>%
dplyr::select(-c('index', 'Personal_ID', 'City.Community')) %>%
relocate(Person_Income)
data$Sex <- factor(data$Sex)
data <- cata_encode(data) # Dummy encoding
# Train-test Split
train <- data[1:round(0.75 * nrow(data)),]
test <- data[(round(0.75 * nrow(data)) + 1):nrow(data), ]
# Train model
model <- train(Person_Income ~ ., data = train, method = "lm")
test$predict_vals <- predict(model, test)
test$predict_vals <- ifelse(test$predict_vals < 0, 0, test$predict_vals)
test_r2 <- as.numeric(postResample(test$predict_vals, test$Person_Income)[2])
holdout$predict_vals <- predict(model, newdata = holdout)
holdout$predict_vals <- ifelse(holdout$predict_vals < 0, 0, holdout$predict_vals)
holdout_r2 <- as.numeric(postResample(holdout$predict_vals, holdout$Person_Income)[2])
split_name <- str_split(f, pattern = "_")[[1]]
if (split_name[1] == "01"){
scores[varname] <- 0
scores_holdout[varname] <- 0
}
varname <- sprintf("LR_%s_%s", split_name[2], split_name[3])
print(sprintf("%s: %.4f (test), %.4f (holdout)", f, test_r2, holdout_r2))
print(varname)
scores[as.numeric(split_name[1]), varname] <- test_r2
scores_holdout[as.numeric(split_name[1]), varname] <- holdout_r2
relocate(holdout, predict_vals, .after = Person_Income)
relocate(test, predict_vals, .after = Person_Income)
}
for (f in fnames){
data <- read_feather(sprintf("%s/%s", feather_dir, f)) %>%
dplyr::select(-c('index', 'Personal_ID', 'City.Community')) %>%
relocate(Person_Income)
data$Sex <- factor(data$Sex)
data <- cata_encode(data) # Dummy encoding
# Train-test Split
train <- data[1:round(0.75 * nrow(data)),]
test <- data[(round(0.75 * nrow(data)) + 1):nrow(data), ]
# Train model
model <- train(Person_Income ~ ., data = train, method = "lm")
test$predict_vals <- predict(model, test)
test$predict_vals <- ifelse(test$predict_vals < 0, 0, test$predict_vals)
test_r2 <- as.numeric(postResample(test$predict_vals, test$Person_Income)[2])
holdout$predict_vals <- predict(model, newdata = holdout)
holdout$predict_vals <- ifelse(holdout$predict_vals < 0, 0, holdout$predict_vals)
holdout_r2 <- as.numeric(postResample(holdout$predict_vals, holdout$Person_Income)[2])
split_name <- str_split(f, pattern = "_")[[1]]
varname <- sprintf("LR_%s_%s", split_name[2], split_name[3])
if (split_name[1] == "01"){
scores[varname] <- 0
scores_holdout[varname] <- 0
}
print(sprintf("%s: %.4f (test), %.4f (holdout)", f, test_r2, holdout_r2))
print(varname)
scores[as.numeric(split_name[1]), varname] <- test_r2
scores_holdout[as.numeric(split_name[1]), varname] <- holdout_r2
relocate(holdout, predict_vals, .after = Person_Income)
relocate(test, predict_vals, .after = Person_Income)
}
scores
